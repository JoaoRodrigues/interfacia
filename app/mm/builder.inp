!
! Rebuilds missing atoms based on topology
! Adapted from HADDOCK protocols here and there.
! JR @ 2015
!
define(
    {===>} atom_build=(not known);
)

evaluate ($coorin = "molecule.pdb")
evaluate ($coorout = "molecule_cmplt.pdb")

! Mute (most) output
set message=off echo=off end

!
! Read parameter and topology databases
!

parameter
    @@toppar/protein-allhdg5-4.param
    @@toppar/ion.param
    @@toppar/ligand.param
end

topology
    @@toppar/protein-allhdg5-4.top
    @@toppar/protein_break.top
    @@toppar/ion.top
    @@toppar/ligand.top
end

!
! Read coordinates
!

segment
  chain
    @@toppar/protein-allhdg5-4.link
    separate=true
    coordinates @@$coorin
  end
end

coordinates @@$coorin

!
! Build missing atoms if necessary
!
show sum(1) ( not(hydrogen) and not(known) )
    if ( $select = 0 ) then
    display  INFO: There are no coordinates missing for non-hydrogen atoms
end if

identity (store1) (&atom_build)
show sum(1) (store1)
evaluate ($tobuild=$result)

if ( $tobuild > 0 ) then
    ! Fix known atoms
    fix selection=(not(store1)) end

    show sum(1) (store1)
    evaluate ($moving=$result)

    if ( $moving > 0 ) then
        for $id in id (tag and byres(store1)) loop avco
            show ave(x) (byres(id $id) and known)
            evaluate ($ave_x=$result)
            show ave(y) (byres(id $id) and known)
            evaluate ($ave_y=$result)
            show ave(z) (byres(id $id) and known)
            evaluate ($ave_z=$result)

            do (x=$ave_x) (byres(id $id) and store1)
            do (y=$ave_y) (byres(id $id) and store1)
            do (z=$ave_z) (byres(id $id) and store1)
        end loop avco

        do (x=x+2*random(1.0)-1) (store1)
        do (y=y+2*random(1.0)-1) (store1)
        do (z=z+2*random(1.0)-1) (store1)

        {- start parameter for the side chain building -}
        parameter
            nbonds
                rcon=20. nbxmod=-2 repel=0.9  wmin=0.1 tolerance=1.
                rexp=2 irexp=2 inhibit=0.25
            end
        end

        {- Friction coefficient, in 1/ps. -}
        do (fbeta=100) (store1)

        evaluate ($bath=300.0)
        evaluate ($nstep=500)
        evaluate ($timestep=0.0005)

        do (refy=mass) (store1)

        do (mass=20) (store1)

        igroup interaction
            (store1) (store1 or known)
        end

        {- turn on initial energy terms -}
        flags 
            exclude * 
            include bond angle vdw 
        end

        minimize powell nstep=50  nprint=10 end

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        flags 
            exclude vdw 
            include impr
        end

        dynamics cartesian
            nstep=50
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        flags 
            include vdw 
        end

        minimize powell nstep=50 nprint=10 end

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        dynamics cartesian
            nstep=50
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        parameter
            nbonds
                rcon=2. nbxmod=-3 repel=0.75
            end
        end

        minimize powell nstep=100 nprint=25 end

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        dynamics cartesian
            nstep=$nstep
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        {- turn on all energy terms -}
        flags include dihe ? end

        {- set repel to ~vdw radii -}
        parameter
            nbonds
                repel=0.89
            end
        end

        minimize powell nstep=500 nprint=50 end

        flags exclude * include bond angl impr dihe vdw end

        {- return masses to something sensible -}
        do (mass=refy) (store1)

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        dynamics cartesian
            nstep=$nstep
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        {- some final minimisation -}
        minimize powell
            nstep=500
            drop=40.0
            nprint=50
        end
    end if ! moving
end if

write coordinates format=PDBO output=$coorout selection=(known) end

stop
