!
! Calculates pairwise residue-residue energies at the interface.
! Rebuilds missing atoms based on topology
! Adapted from HADDOCK protocols here and there.
! JR @ 2015
!
define(
    {===>} atom_build=(not known);
)

evaluate ($coorin = "molecule.pdb")
evaluate ($coorout = "molecule_CNS.pdb")
evaluate ($interface_dist_cutoff = 5.0)

! Mute (most) output
set message=off echo=off end

!
! Read parameter and topology databases
!

parameter
    @@toppar/protein-allhdg5-4.param
    @@toppar/ion.param
    @@toppar/ligand.param
end

topology
    @@toppar/protein-allhdg5-4.top
    @@toppar/protein_break.top
    @@toppar/ion.top
    @@toppar/ligand.top
end

!
! Read coordinates
!

segment
  chain
    separate=true
    @@toppar/protein-allhdg5-4.link
    coordinates @@$coorin
  end
end

coordinates @@$coorin
delete sele=(hydrogen and attr charge = 0) end

!
! Build missing atoms if necessary
!
show sum(1) ( not(hydrogen) and not(known) )
    if ( $select = 0 ) then
    display  INFO: There are no coordinates missing for non-hydrogen atoms
end if

identity (store1) (&atom_build)
show sum(1) (store1)
evaluate ($tobuild=$result)

if ( $tobuild > 0 ) then
    ! Fix known atoms
    fix selection=(not(store1)) end

    show sum(1) (store1)
    evaluate ($moving=$result)

    if ( $moving > 0 ) then
        for $id in id (tag and byres(store1)) loop avco
            show ave(x) (byres(id $id) and known)
            evaluate ($ave_x=$result)
            show ave(y) (byres(id $id) and known)
            evaluate ($ave_y=$result)
            show ave(z) (byres(id $id) and known)
            evaluate ($ave_z=$result)

            do (x=$ave_x) (byres(id $id) and store1)
            do (y=$ave_y) (byres(id $id) and store1)
            do (z=$ave_z) (byres(id $id) and store1)
        end loop avco

        do (x=x+2*random(1.0)-1) (store1)
        do (y=y+2*random(1.0)-1) (store1)
        do (z=z+2*random(1.0)-1) (store1)

        {- start parameter for the side chain building -}
        parameter
            nbonds
                rcon=20. nbxmod=-2 repel=0.9  wmin=0.1 tolerance=1.
                rexp=2 irexp=2 inhibit=0.25
            end
        end

        {- Friction coefficient, in 1/ps. -}
        do (fbeta=100) (store1)

        evaluate ($bath=300.0)
        evaluate ($nstep=500)
        evaluate ($timestep=0.0005)

        do (refy=mass) (store1)

        do (mass=20) (store1)

        igroup interaction
            (store1) (store1 or known)
        end

        {- turn on initial energy terms -}
        flags 
            exclude * 
            include bond angle vdw 
        end

        minimize powell nstep=50  nprint=10 end

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        flags 
            exclude vdw 
            include impr
        end

        dynamics cartesian
            nstep=50
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        flags 
            include vdw 
        end

        minimize powell nstep=50 nprint=10 end

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        dynamics cartesian
            nstep=50
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        parameter
            nbonds
                rcon=2. nbxmod=-3 repel=0.75
            end
        end

        minimize powell nstep=100 nprint=25 end

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        dynamics cartesian
            nstep=$nstep
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        {- turn on all energy terms -}
        flags include dihe ? end

        {- set repel to ~vdw radii -}
        parameter
            nbonds
                repel=0.89
            end
        end

        minimize powell nstep=500 nprint=50 end

        flags exclude * include bond angl impr dihe vdw end

        {- return masses to something sensible -}
        do (mass=refy) (store1)

        do (vx=maxwell($bath)) (store1)
        do (vy=maxwell($bath)) (store1)
        do (vz=maxwell($bath)) (store1)

        dynamics cartesian
            nstep=$nstep
            timestep=$timestep
            tcoupling=true temperature=$bath
            nprint=$nstep
            cmremove=false
        end

        {- some final minimisation -}
        minimize powell
            nstep=500
            drop=40.0
            nprint=50
        end

        print thres=0.02 bonds
        print thres=5. angles
    end if ! moving
end if

write coordinates format=PDBO output=$coorout selection=(known) end

!
! Re-read optimized coordinates
!
delete sele=(all) end
segment
  chain
    separate=true
    @@toppar/protein-allhdg5-4.link
    coordinates @@$coorout
  end
end

coordinates @@$coorout
delete sele=(hydrogen and attr charge = 0) end

!
! (re)Set energy flags & parameters
!
parameter
  nbonds
    nbxmod=5 atom cdie shift
    cutnb=9.5 ctofnb=8.5 ctonnb=6.5 eps=1.0 e14fac=0.4 inhibit 0.25
    wmin=0.5 tolerance  0.5
  end
end

flags
    exclude *
    include vdw elec
end

!
! Get interfacial residues of chain A (receptor)
! Assume chains A & B
!
do (store1 = 1) (byres (segid A and
                        (not segid A) around $interface_dist_cutoff))

evaluate ($buffer_file = $coorin - ".pdb" + ".pwr_ene")
buffer energies to=file=$buffer_file end
buffer energies
    display ## Pairwise Interface Residue-Residue Energies ($coorin)
end

for $id_a in id (attr store1 = 1 and tag) loop res_a
    show (resid) (id $id_a)
    evaluate ($resi_a = $result)
    show (resn) (id $id_a)
    evaluate ($resn_a = $result)

    do (store2 = 0) (segid B)
    for $id_b in id ( segid B and (segid A and resid $resi_a) around $interface_dist_cutoff ) loop res_b
        show (resid) (id $id_b)
        evaluate ($resi_b = $result)
        show (resn) (id $id_b)
        evaluate ($resn_b = $result)

        ! Avoid multiple calcs per residue
        identity (store3) (segid B and resid $resi_b and attribute store2 > 0)
        if ( $select = 0 ) then
            igroup interaction (segid A and resid $resi_a) (segid B and resid $resi_b) end
            energy end
            ! Calculate total energy as per HADDOCK scoring function
            evaluate ($total = ($vdw + $elec))
            buffer energies
                display # A $resi_a $resn_a <> B $resi_b $resn_b - vdW = $vdw elec = $elec total = $total
            end
            do (store2 = 1) (segid B and resid $resi_b)
        end if
    end loop res_b

end loop res_a

buffer energies dump end

stop
